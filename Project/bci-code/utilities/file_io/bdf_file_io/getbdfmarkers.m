% function returns all markers from the STATUS channel according to the
% marker type definitions specified by <markerdefinition> 
% If no second argument is specified, it uses the following type
% definitions:
% 	markerdefinition = ...
% 		{ ...
% 		'type',				'mask',		'flank';...
% 		'Stimulus',			'0000ff',	'up';	...
% 		'Response',			'00ff00',	'up';	...
% 		'Epoch',			'010000',	'up';	...
% 		'Epoch end',		'010000',	'down';	...
% 		'CM_in_range',		'100000',	'up';	...
% 		'CM_out_of_range',	'100000',	'down';	...
% 		'Battery_low',		'400000',	'up';	...
% 		'Battery_ok',		'400000',	'down'	...
% 		};
% Another option would be:
% 	markerdefinition = ...
% 		{ ...
% 		'type',				'mask',		'flank';...
% 		'Stimulus',			'00ffff',	'up';	...
% 		'Epoch',			'010000',	'up';	...
% 		'CM_in_range',		'100000',	'up';	...
% 		'CM_out_of_range',	'100000',	'down';	...
% 		'Battery_low',		'400000',	'up';	...
% 		'Battery_ok',		'400000',	'down'	...
% 		};

function mrks = getbdfmarkers(filename,markerdefinition)

if nargin < 2
	% set it to default
	markerdefinition = ...
		{ ...
		'type',		'mask',	'flank';	...
		'Stimulus',		'0000ff',	'up';	...
		'Response',		'00ff00',	'up';	...
		'Epoch',			'010000',	'up';	...
		'CM_in_range',		'100000',	'up';	...
		'CM_out_of_range',	'100000',	'down';	...
		'Battery_low',		'400000',	'up';	...
		'Battery_ok',		'400000',	'down'	...
		};
end
trigger = read_type_markers(markerdefinition);

% set memory map file structure and select the number of channels to be read
% at once for every record
% only read the last=status channel
mf = read_biosemi_bdf_memmap(filename,'end');

nsamp = max(mf.hdr.orig.SPR);
nrec = mf.hdr.orig.NRec;
mrks = [];
oldsample = [];
for rec = 1:nrec
	% get status channel data for this record
	startsample = (rec-1)*nsamp;
	[mf, data] = read_biosemi_bdf_memmap(mf, startsample+1, rec*nsamp);
	data = removeBiosemiStatusSignbits(double(data));
	%data = uint32(data+2^24);
	[newmrks oldsample] = get_mrks_epoch(data,startsample,oldsample,trigger);
	mrks = horzcat(mrks,newmrks);
	fprintf('.'); if ~mod(rec,50), fprintf('\n'); end
end

% sorted output
all = [{mrks.type}' {mrks.value}' {mrks.sample}'];
[val,idxs] = sortrows(cell2mat(all(:,3)));
disp(all(idxs,:));
mrks=mrks(idxs);
