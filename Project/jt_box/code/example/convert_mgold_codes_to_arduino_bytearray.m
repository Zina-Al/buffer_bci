% Matlab code to convert one-bit-per-byte-for-one-channel to each byte contains bit-code for 8 channels:

function convert_mgold_codes_to_arduino_bytearray(file, pick)
if nargin < 1
   file = '~/bci_code/own_experiments/visual/noise_tagging/jt_box/code/example/mgold_61_6521_flip_balanced.txt';  % Code file for testing
   %file = '~/bci_code/own_experiments/visual/noise_tagging/jt_box/code/example/mgold_61_6521.mat';
end
if nargin < 2
   pick = 1:8;
end
codes = loadcodes(file);
codes = codes(:,pick);

% file = '~/bci_code/own_experiments/visual/noise_tagging/jt_box/code/example/mgold_61_6521.mat';
% Seq = { ...
%   {0,1,0,1,1,0,1,0,1,0,1,0,1,0,0,1,1,0,1,0,1,0,0,1,1,0,0,1,1,0,1,0,0,1,1,0,0,1,0,1,0,1,1,0,1,0,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,0,1,1,0,0,1,0,1,0,1,1,0,1,0,0,1,1,0,0,1,1,0,0,1,0,1,0,1,0,1,1,0,1,0,0,1,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1},...
%   {1,0,1,0,0,1,0,1,0,1,0,1,1,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0,0,1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,1,0,1,0,1,0,1},...
%   {1,0,0,1,1,0,1,0,1,0,1,0,0,1,1,0,0,1,0,1,0,1,1,0,1,0,1,0,1,0,0,1,0,1,0,1,1,0,0,1,0,1,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,0,1,1,0,1,0,1,0,1,0,0,1,1,0,1,0,1,0,0,1,1,0,0,1,0,1,1,0,0,1,0,1,0,1,1,0,0,1,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,1},...
%   {1,0,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,0,1,1,0,1,0,0,1,0,1,0,1,1,0,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,0,1,1,0,1,0,1,0,0,1,0,1,0,1},...
%   {1,0,0,1,0,1,1,0,1,0,1,0,0,1,1,0,1,0,1,0,1,0,0,1,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,1,1,0,0,1,1,0,0,1,0,1,1,0,1,0,1,0,0,1,0,1,1,0,1,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,1,0,1,0,1,0,1,0,0,1,0,1},...
%   {1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,1,0,1,0,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,0,1,0,0,1,0,1,0,1,1,0,1,0,1,0,0,1,1,0,1,0,0,1,1,0,0,1,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,1,0,0,1,1,0,1,0,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1},...
%   {1,0,0,1,0,1,1,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,1,0,1,0,1,0,0,1,0,1,0,1,0,1,1,0,0,1,1,0,1,0,1,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,1,0,0,1,1,0,0,1,0,1,1,0,1,0,1,0,1,0,1,0},...
%   {0,1,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,0,1,1,0,0,1,1,0,0,1,0,1,1,0,0,1,1,0,0,1,0,1,1,0,0,1,0,1,0,1,1,0,0,1,0,1,0,1,0,1,0,1,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,1,0,0,1,1,0,0,1,1,0,1,0,1,0,1,0} ...
% };

binSeq = [];
for i = 1 : size(codes,1) %numel(Seq{1})
   binSeq(i) = 0;
   for n = 1 : numel(pick)
      % convert 8 channels to each byte contains bits for all channels on code
      % index i
      %binSeq(i) = binSeq(i) + Seq{n}{i} * 2^(n-1);
      binSeq(i) = binSeq(i) + codes(i,n) * 2^(n-1);
   end
end

% produce new output for Arduino code to reduce memory usage enormously
fprintf('\n{'); 
for n=1:size(binSeq,2)
   s=sprintf('%d,',binSeq(:,n)); 
   s(end)=[]; fprintf('%s,',s); 
end
fprintf('}\n');

% result for: mgold_61_6521_flip_balanced.txt
% {126,129,130,125,133,122,117,138,21,234,213,42,171,84,214,41,83,172,217,38,51,204,230,25,77,178,100,155,55,200,17,238,34,221,59,196,118,137,18,237,218,37,203,52,233,22,45,210,164,91,73,182,108,147,167,88,78,177,99,156,199,56,142,113,29,226,69,186,11,244,151,104,175,80,222,33,195,60,134,121,114,141,26,229,181,74,107,148,168,87,209,46,92,163,185,70,12,243,152,103,48,207,30,225,189,66,251,4,8,247,111,144,160,95,190,65,252,3,248,7,240,15,96,159,192,63}

% result for: mgold_61_6521.mat
% {126,129,2,253,5,250,245,10,21,234,213,42,171,84,86,169,83,172,89,166,179,76,102,153,205,50,100,155,55,200,145,110,34,221,187,68,118,137,18,237,218,37,75,180,105,150,45,210,164,91,73,182,108,147,39,216,78,177,99,156,199,56,142,113,29,226,197,58,139,116,23,232,47,208,94,161,67,188,134,121,242,13,26,229,53,202,107,148,40,215,81,174,92,163,185,70,140,115,24,231,48,207,158,97,61,194,123,132,8,247,239,16,32,223,190,65,124,131,248,7,240,15,224,31,192,63}